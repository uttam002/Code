/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   public static int pseudoPalindromicPaths(TreeNode root) {
        return countPseudoPalindromicPaths(root, 0);
    }

    private static int countPseudoPalindromicPaths(TreeNode node, int currentPathCount) {
        if (node == null) {
            return 0;
        }
        // Update the count for the current digit
        currentPathCount ^= (1 << node.val);

        // If it's a leaf node, check if the current path is pseudo-palindromic
        if (node.left == null && node.right == null) {
            return Integer.bitCount(currentPathCount) <= 1 ? 1 : 0;
        }

        // Recursively check pseudo-palindromic paths in the left and right subtrees
        return countPseudoPalindromicPaths(node.left, currentPathCount)
                + countPseudoPalindromicPaths(node.right, currentPathCount);
    }    
}
